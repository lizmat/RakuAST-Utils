=begin pod

=head1 NAME

RakuAST::Utils - provide basic RakuAST utilities

=head1 SYNOPSIS

=begin code :lang<raku>

use RakuAST::Utils;

say NameAST("Foo::Bar");

say TypeAST( Array[Int] );

sub foo(Int $a, Str $b) { }
say ParameterAST( &foo.signature.params[0] );

say SignatureAST( &foo.signature );

=end code

=head1 DESCRIPTION

The C<RakuAST::Utils> provides a number of subroutines that make the
programmatical creation of code using RakuAST a lot easier.

=head1 SUBROUTINES

=head2 NameAST

=begin code :lang<raku>
say NameAST( "Foo" );
say NameAST( "Foo::Bar" );
=end code
=begin output
RakuAST::Name.from-identifier("Foo")
RakuAST::Name.from-identifier-parts("Foo","Bar")
=end output

The C<TypeAST> subroutine takes a package-like string and returns the
RakUAST representation of that string.

=head2 TypeAST

=begin code :lang<raku>
say TypeAST( Array[Int] );
=end code
=begin output
RakuAST::Type::Parameterized.new(
  base-type => RakuAST::Type::Simple.new(
    RakuAST::Name.from-identifier("Array")
  ),
  args      => RakuAST::ArgList.new(
    RakuAST::Type::Simple.new(
      RakuAST::Name.from-identifier("Int")
    )
  )
)
=end output

The C<TypeAST> subroutine takes a type object and returns the RakUAST
representation of that type object.

=head2 ParameterAST

=begin code :lang<raku>
sub foo(Int $a, Str $b --> Str:D) { }
say ParameterAST( &foo.signature.params[0] );
=end code
=begin output
RakuAST::Parameter.new(
  type   => RakuAST::Type::Simple.new(
    RakuAST::Name.from-identifier("Int")
  ),
  target => RakuAST::ParameterTarget::Var.new(
    name => "\$a"
  )
)
=end output

The C<ParameterAST> subroutine takes a
L<C<Parameter>|https://docs.raku.org/type/Parameter> object and returns
the RakUAST representation of that object.

=head2 SignatureAST

=begin code :lang<raku>
sub foo(Int $a, Str $b --> Str:D) { }
say SignatureAST( &foo.signature );
=end code
=begin output
RakuAST::Signature.new(
  parameters => (
    RakuAST::Parameter.new(
      type   => RakuAST::Type::Simple.new(
        RakuAST::Name.from-identifier("Int")
      ),
      target => RakuAST::ParameterTarget::Var.new(
        name => "\$a"
      )
    ),
    RakuAST::Parameter.new(
      type   => RakuAST::Type::Simple.new(
        RakuAST::Name.from-identifier("Str")
      ),
      target => RakuAST::ParameterTarget::Var.new(
        name => "\$b"
      )
    ),
  ),
  returns    => RakuAST::Type::Simple.new(
    RakuAST::Name.from-identifier("Str:D")
  )
)
=end output

The C<SignatureAST> subroutine takes a
L<C<Signature>|https://docs.raku.org/type/Signature> object and returns
the RakUAST representation of that object.

=head1 ACKNOWLEDGEMENTS

The initial version of this distribution was taken from the work on
L<C<.assuming>|https://github.com/rakudo/rakudo/issues/2599>, which
was sponsored by the L<Raku Foundation|https://raku.foundation>.

=head1 AUTHOR

Elizabeth Mattijsen <liz@raku.rocks>

Source can be located at: https://github.com/lizmat/RakuAST-Utils .
Comments and Pull Requests are welcome.

If you like this module, or what I'm doing more generally, committing to a
L<small sponsorship|https://github.com/sponsors/lizmat/>  would mean a great
deal to me!

=head1 COPYRIGHT AND LICENSE

Copyright 2025 Elizabeth Mattijsen

This library is free software; you can redistribute it and/or modify it under the Artistic License 2.0.

=end pod

# vim: expandtab shiftwidth=4
